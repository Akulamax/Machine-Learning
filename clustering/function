import math


def matrix_to_complex(data_array):  # перевод массив из обычного в массив состоящий их массивов
    mussive = []
    for data in data_array:
        mussive.append([data])
    return mussive


def matrix_to_simple(data_array):  # обратный перевод matrix_to_complex
    mussive = []
    for data in data_array:
        for i in range(len(data)):
            mussive.append(data[i])
    return mussive


def distance(x1, y1, x, y):  # расстояние между центром кластера (x, y) и точкой (x1, y1)
    dist = math.sqrt((x1 - x) ** 2 + (y1 - y) ** 2)
    return dist


def grahamscan(A):
    n = len(A)  # число точек
    P = []  # список номеров точек
    for i in range(n):
        P.append(i)
    for i in range(1, n):
        if A[P[i]][0] < A[P[0]][0]:  # если P[i]-ая точка лежит левее P[0]-ой точки
            temp = P[i]  # P[i], P[0] = P[0], P[i]  # меняем местами номера этих точек
            P[i] = P[0]
            P[0] = temp
    for i in range(2, n):  # сортировка вставкой
        j = i
        while j > 1 and (rotate(A[P[0]], A[P[j - 1]], A[P[j]]) < 0):
            P[j], P[j - 1] = P[j - 1], P[j]
            j -= 1
    S = [P[0], P[1]]  # создаем стек
    for i in range(2, n):
        while rotate(A[S[-2]], A[S[-1]], A[P[i]]) < 0:
            del S[-1]  # pop(S)
        S.append(P[i])  # push(S,P[i])
    B = []
    for i in range(len(S)):
        B.append(A[S[i]])
    return B


def rotate(A, B, C):
    return (B[0] - A[0]) * (C[1] - B[1]) - (B[1] - A[1]) * (C[0] - B[0])


def inPolygon(x, y, array):
    c = 0
    for i in range(len(array)):
        if (((array[i][1] <= y < array[i - 1][1]) or (array[i - 1][1] <= y < array[i][1])) and
                (x > (array[i - 1][0] - array[i][0]) * (y - array[i][1]) / (array[i - 1][1] - array[i][1]) + array[i][
                    0])):
            c = 1 - c
    return c


def check(data_array, center_array):  # переделать
    sum = 0
    count1 = 0
    for data in data_array:
        count1 += 1
        count2 = 0
        if len(data) > 3:
            for center in center_array:
                count2 += 1
                if count1 != count2:
                    data0 = grahamscan(data)
                    sum += inPolygon(center[0], center[1], data0)
        else:
            return -1
    if sum != 0:
        return False
    else:
        return True


def in1Polygon(x, y, xp, yp):
    c = 0
    for i in range(len(xp)):
        if (((yp[i] <= y < yp[i - 1]) or (yp[i - 1] <= y < yp[i])) and
                (x > (xp[i - 1] - xp[i]) * (y - yp[i]) / (yp[i - 1] - yp[i]) + xp[i])):
            c = 1 - c
    return c

# print(in1Polygon(100, 0, (-100, 100, 100, -100), (100, 100, -100, -100)))
# mus = [[[0, 0]], [[100, 100]], [[100, 0]], [[0, 100]]]
# arr = [[50, 50]]
# print(check(mus, arr))
